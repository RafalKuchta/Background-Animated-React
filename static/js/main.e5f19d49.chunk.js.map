{"version":3,"sources":["Animated.js","App.js","serviceWorker.js","index.js"],"names":["Animated","state","posX","posY","document","addEventListener","event","setNewPosition","removeEventListener","clientX","clientY","this","props","ratioX","ratioY","window","innerWidth","innerHeight","setState","className","src","alt","style","transform","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAoDeA,E,2MAjDbC,MAAQ,CACNC,KAAM,EACNC,KAAM,G,mFAGa,IAAD,OAClBC,SAASC,iBAAiB,YAAa,SAAAC,GAAK,OAAI,EAAKC,eAAeD,O,6CAG9C,IAAD,OACrBF,SAASI,oBAAoB,YAAa,SAAAF,GAAK,OAC7C,EAAKC,eAAeD,O,qCAITA,GAAQ,IACbG,EAAqBH,EAArBG,QAASC,EAAYJ,EAAZI,QADG,EAEOC,KAAKC,MAAxBC,EAFY,EAEZA,OAAQC,EAFI,EAEJA,OAKVZ,EAAOO,EAHGM,OAAOC,WAAa,EAI9Bb,EAAOO,EAHGK,OAAOE,YAAc,EAKrCN,KAAKO,SAAS,CACZhB,KAAMA,GAAQW,EACdV,KAAMA,GAAQW,M,+BAIR,IAAD,EACoBH,KAAKC,MAAxBO,EADD,EACCA,UAAWC,EADZ,EACYA,IADZ,EAEgBT,KAAKV,MAApBC,EAFD,EAECA,KAAMC,EAFP,EAEOA,KACd,OACE,oCACE,yBACEgB,UAAWA,EACXC,IAAKA,EACLC,IAAI,GACJC,MAAO,CACLC,UAAU,aAAD,OAAerB,EAAf,eAA0BC,EAA1B,e,GA1CEqB,aCoDRC,MAjDf,WACE,OAAS,yBACHN,UAAY,qBAChB,kBACA,EADA,CACSA,UAAY,eACrBC,IAAM,aACNP,OAAS,MACTC,OAAS,SAGT,kBACA,EADA,CACSK,UAAY,eACrBC,IAAM,aACNP,OAAS,OACTC,OAAS,SAGT,kBACA,EADA,CACSK,UAAY,eACrBC,IAAM,aACNP,OAAS,MACTC,OAAS,SAGT,kBACA,EADA,CACSK,UAAY,eACrBC,IAAM,aACNP,OAAS,OACTC,OAAS,SAGT,kBACA,EADA,CACSK,UAAY,eACrBC,IAAM,aACNP,OAAS,OACTC,OAAS,SAGT,kBACA,EADA,CACSK,UAAY,iBACrBC,IAAM,eACNP,OAAS,OACTC,OAAS,UCnCOY,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAAS4B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e5f19d49.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Animated extends Component {\r\n  state = {\r\n    posX: 0,\r\n    posY: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"mousemove\", event => this.setNewPosition(event));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"mousemove\", event =>\r\n      this.setNewPosition(event)\r\n    );\r\n  }\r\n\r\n  setNewPosition(event) {\r\n    const { clientX, clientY } = event;\r\n    const { ratioX, ratioY } = this.props;\r\n\r\n    const centerX = window.innerWidth / 2;\r\n    const centerY = window.innerHeight / 2;\r\n\r\n    const posX = clientX - centerX;\r\n    const posY = clientY - centerY;\r\n\r\n    this.setState({\r\n      posX: posX * -ratioX,\r\n      posY: posY * -ratioY\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { className, src } = this.props;\r\n    const { posX, posY } = this.state;\r\n    return (\r\n      <>\r\n        <img\r\n          className={className}\r\n          src={src}\r\n          alt=\"\"\r\n          style={{\r\n            transform: `translate(${posX}px, ${posY}px)`\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Animated;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./style.css\";\nimport Animated from \"./Animated\";\n\nfunction App() {\n  return ( <\n    div className = \"balloon-animation\" >\n    <\n    Animated className = \"flying-cloud\"\n    src = \"/cloud.png\"\n    ratioX = \"0.2\"\n    ratioY = \"0.23\" /\n    >\n\n    <\n    Animated className = \"flying-cloud\"\n    src = \"/cloud.png\"\n    ratioX = \"0.26\"\n    ratioY = \"0.34\" /\n    >\n\n    <\n    Animated className = \"flying-cloud\"\n    src = \"/cloud.png\"\n    ratioX = \"0.1\"\n    ratioY = \"0.11\" /\n    >\n\n    <\n    Animated className = \"flying-cloud\"\n    src = \"/cloud.png\"\n    ratioX = \"0.13\"\n    ratioY = \"0.53\" /\n    >\n\n    <\n    Animated className = \"flying-cloud\"\n    src = \"/cloud.png\"\n    ratioX = \"0.23\"\n    ratioY = \"0.41\" /\n    >\n\n    <\n    Animated className = \"flying-balloon\"\n    src = \"/balloon.png\"\n    ratioX = \"0.07\"\n    ratioY = \"0.3\" /\n    >\n    <\n    /div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}